////
/// @group color
////

@use "sass:map";
@use "sass:meta";
@use "utils";

/// The defualt black value, can be tinted and other users of the color
/// @type Color

$black: black !default;

/// The defualt black value, can be tinted and other users of the color
/// @type Color

$white: white !default;

/// The color palette map, can be extended or modified with set() and accessed with get()
/// @type map  

$palette: (
  "black" : $black,
  "white" : $white,
  "type": $black,
  "error": red,
  "box-shadow" : black,
  "rule" : gray,
  "rule-light" : lightgray,
  "link" : blue,
  "link:hover" : darkblue,
  "link:active" : darkblue,
  "link:visited" : purple
) !default;

/// Pairs of background-color / color definitions
/// @type map
/// @prop {Number|String} $contexts.name.background-color Color value or name of color in $palette
/// @prop {Number|String} $contexts.name.color Color value or name of color in $palette
/// @prop {Boolean} $contexts.name.base-class Print this value in the base module as a class (if base prints)

$contexts: (
  "dark" : (
    "background-color" : "black",
    "color" : "white",
    "base-class" : true
  ),
  "light" : (
    "background-color" : "white",
    "color" : "black",
    "base-class" : true
  ),
);

/// Used to override or extend the color palette
/// @param {Map} $changes A map to merge into the color palette
/// @example scss Setting the error and type color
///   @include color.set((
///     "type" : #444,
///     "error" : orange,
///   ));

@mixin set($changes) {
  $palette: map.merge($palette, $changes) !global;
}

/// Get a color from the palette by name
/// @param {String} $name Name of color to get
/// @return {Color}

@function get($name) {
  // Allow non lookup if the value is already a color (helps with code flow)
  @if (meta.type-of($name) == "color") {
    @return $name;
  }
  @return utils.require-map-get($palette, $name, 'color');
}

/// Set color contexts
/// @param {Map} $changes A map to merge 
/// @param {Map} $deep Use deep merge
/// @param {Map} $overwrite Overwrite the completly (cannot be used with deep)
/// @example scss Overwriting contexts
///   @include color.set-contexts((
///     "dark" : (
///       "background-color" : red,
///       "color" : white,
///     )
///   ), false, true);

@mixin set-contexts($changes, $deep: false, $overwrite: false) {
  $contexts: utils.map-merge-or-overwrite($contexts, $changes, $deep, $overwrite) !global;
}

/// Get a context by name
/// @param {String} $name Name of context
/// @return {Map}

@function get-context($name) {
  @return utils.require-map-get($contexts, $name, 'context');
}

/// Get a context's value'
/// @param {String} $name Name of context
/// @param {String} $prop The property to get
/// @return {Color}

@function get-context-value($name, $prop) {
  $context: get-context($name);
  $value: map.get($context, $prop);
  // Get from pallete by name
  @if (meta.type-of($value) == "string") {
    $value: get($value);
  }
  @return $value;
}

/// Prints contexts styles
/// @param {String} $name Name of context

@mixin context-styles($name) {
  background-color: get-context-value($name, "background-color");
  color: get-context-value($name, "color");
}

/// Lighten a color using the default white by a percentage
/// @param {Color} $color Color to apply to tint
/// @param {Number} $percentage Percentage
/// @return {Color}
/// @author 
/// @link https://css-tricks.com/snippets/sass/tint-shade-functions/ Modified from source (CSS Tricks, Kitty Giraudel)

@function tint($color, $percentage) {
  @return mix($white, $color, $percentage);
}

/// Darken a color with the default black by a percentage
/// @param {Color} $color Color to shade
/// @param {Number} $percentage Percentage to shade
/// @return {Color}
/// @author Kitty Giraudel
/// @link https://css-tricks.com/snippets/sass/tint-shade-functions/ Modified from source (CSS Tricks, Kitty Giraudel)

@function shade($color, $percentage) {
  @return mix($black, $color, $percentage);
}