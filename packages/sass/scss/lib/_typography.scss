////
/// @group Library:Typography
////

@use "sass:map";
@use "sass:meta";
@use "utils";
@use "calculate";

/// Base line height
/// @type Number
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/line-height MDN 1.5 is minimum for low vision, Dyslexia

$line-height: 1.5 !default; 

/// Base dense line height
/// @type Number

$line-height-dense: 1.2 !default;

/// Base font-size set in rem's
/// @type Number

$font-size: 16px !default;

/// Base font-family
/// @type Number

$font-family: ui-sans-serif, "Open Sans", Helvetica, Arial, sans-serif !default;

/// Base font-family for monospace
/// @type String

$font-family-monospace: ui-monospace, SFMono-Regular, Consolas, Menlo, monospace !default;

/// Base font-size ratio 
/// @type Number

$size-ratio: 2 !default;

/// Base line-height ratio 
/// @type Number

$size-line-height-ratio: 0.97 !default;

/// Base font-size scale steps (used in presets scaling) 
/// @type Number

$scale-steps: 5 !default;

/// Responsive Typography Viewport Percentage (use vw units)
/// @type Number

$responsive-change: 0.2vw !default; // Each size would be increased/decreased by 25% from the base

/// Default Margin (bottom only)
/// @type Number

$margin: 0.75em !default;

/// Get scale of the base font-size
/// @param {Number} $step Current size in the scale you want to calculate
/// @return {Number} Base font-size scaled

@function font-size-scale($step) {
  @return calculate.ratio-scale-size(1rem, $size-ratio, $scale-steps, $step);
}

/// Get scale of the base font-size
/// @param {Number} $step Current size in the scale you want to calculate
/// @return {Number} Base font-size scaled

@function line-height-scale($step) {
  // @return $line-height;
  @return calculate.ratio-scale-size($line-height, $size-line-height-ratio, $scale-steps, $step);
}

/// Default size presets
/// @type Map

$sizes: (
  "small-x" : (
    "font-size": font-size-scale(-2),
    "line-height": $line-height,
    "responsive" : true
  ),
  "small" : (
    "font-size": font-size-scale(-1),
    "line-height": $line-height,
    "responsive" : true
  ),
  "base" : (
    "font-size": font-size-scale(0),
    "line-height": $line-height,
    "responsive" : true
  ),
  "large" : (
    "font-size": font-size-scale(1),
    "line-height": line-height-scale(1),
    "responsive" : true
  ),
  "large-x" : (
    "font-size": font-size-scale(2),
    "line-height": line-height-scale(2),
    "responsive" : true
  ),
  "large-xx" : (
    "font-size": font-size-scale(3),
    "line-height": line-height-scale(3),
    "responsive" : true
  ),
  "large-xxx" : (
    "font-size": font-size-scale(4),
    "line-height": line-height-scale(4),
    "responsive" : true
  )
) !default;

/// Update the typography presets map
/// @param {Map} $changes A map to merge into the color palette
/// @param {Map} $deep Use deep merge
/// @param {Map} $overwrite Overwrite the presets completly (cannot be used with deep)
/// @example scss Setting the error and type color
///   @include typography.set((
///     "small" : 0.8rem
///   ));

@mixin set-sizes($changes, $deep: false, $overwrite: false) {
  @if $deep {
    $presets: map.deep-merge($presets, $changes) !global;
  } @else if $overwrite {
    $presets: $changes !global;
  } @else {
    $presets: map.merge($presets, $changes) !global;
  }
}

/// Print a typography size (font-size, line-height)
/// @param {String} $name Name to lookup 
/// @param {String} $line-height Print out size's line-height, or override it, pass false to not include

@mixin size($name, $line-height: true) {
  $size: utils.require-map-get($sizes, $name, 'typography');
  $fs: map.get($size, "font-size");
  $responsive: map.get($size, "responsive");

  font-size: $fs;

  @if ($responsive) {
    $r: if(meta.type-of($responsive) == number, $responsive, $responsive-change);
    font-size: calc(#{ $fs } + #{ $r });
  }

  @if $line-height {
    @if (meta.type-of($line-height) == number) {
      line-height: $line-height;
    } @else {
      line-height: map.get($size, "line-height");
    }
  }
}

/// Convert pixel value to rem value based on typography $font-size
/// @param {Number} $pixels Pixel value to convert from
/// @return {Number} Rem value

@function to-rem($pixels) {
  @return ($pixels / $font-size) + rem;
}

/// Break word stradegy
/// @param {Boolean} $force Force words to break (will have unusual breaks)

@mixin word-break($force: false) {
  word-break: if($force, break-all, normal);
  word-break: break-word;
  hyphens: auto;
}