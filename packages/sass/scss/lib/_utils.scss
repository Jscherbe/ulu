////
/// @group Library:Utils
////

/// Remove comments if you'd like
/// @type Boolean 
$file-header-comments: true !default;

@use "sass:map";
@use "sass:list";

/// Get a required value from a map, throw an error if not found
/// @param {Map} $map The map to get the value from
/// @param {String} $key The key in the map to get value from
/// @param {String} $context The context of using this function for debugging help
/// @return {*} The value from the map

@function require-map-get($map, $key, $context: "unknown") {
  $value: map.get($map, $key);
  @if ($value != null) {
    @return $value;
  } @else {
    @error 'ULU: Unable to find  "#{ $key }" in #{ $context } map.';
  }
}

/// Ensure a value is present in the list, throw an error if not found
/// @param {List} $list The map to get the value from
/// @param {String} $value The value to search for in the list
/// @param {String} $context The context of using this function for debugging help

@mixin require-list-has($list, $value, $context: "unknown") {
  $index: list.index($list, $value) != null;
  @if ($index == null) {
    @error 'ULU: Unable to find item "#{ $value }" in #{ $context } list.';
  }
}

/// Require that the list only is only made up of allowed items
/// @param {List} $allowed The list of allowed items
/// @param {String} $list The list to test allowed against

@mixin require-list-contains($allowed, $list, $context: "unknown") {
  @each $item in $list {
    @include require-list-has($allowed, $item, $context);
  }
}

/// Returns true if we should include something (used for output checking)
/// @param {List} $name Name of item to see if it's included
/// @param {List} $includes List of names

@function included($name, $includes) {
  @if ($includes) {
    @return list.index($includes, $name) != null;
  } @else {
    @return true;
  }
}

/// Returns true if we should include something (used for output checking)
/// @param {List} $context The root area of the framework this file comes from
/// @param {List} $name The name of the specific area/file (optional)

@mixin file-header($context, $name: "") {
  @if ($file-header-comments) {
/* 
=============================================================================
#{ $context }:#{ $name }
============================================================================= 
*/
  }
}