////
/// @group Library:Color
////

@use "sass:map";
@use "utils";

/// The defualt black value, can be tinted and other users of the color
/// @type Color

$black: black !default;

/// The defualt black value, can be tinted and other users of the color
/// @type Color

$white: white !default;

/// The color palette map, can be extended or modified with set() and accessed with get()
/// @type map  

$palette: (
  "black" : $black,
  "white" : $white,
  "type": $black,
  "error": red,
  "box-shadow" : black,
  "rule" : gray,
  "rule-light" : lightgray,
  "link" : blue,
  "link:hover" : darkblue,
  "link:active" : darkblue,
  "link:visited" : purple
) !default;

/// Used to override or extend the color palette
/// @param {Map} $changes A map to merge into the color palette
/// @example scss Setting the error and type color
///   @include color.set((
///     "type" : #444,
///     "error" : orange,
///   ));

@mixin set($changes) {
  $palette: map.merge($palette, $changes) !global;
}

/// Get a color from the palette by name
/// @param {String} $name Name of color to get
/// @return {Color}

@function get($name) {
  @return utils.require-map-get($palette, $name, 'color');;
}


/// Lighten a color using the default white by a percentage
/// @param {Color} $color Color to apply to tint
/// @param {Number} $percentage Percentage
/// @return {Color}
/// @author 
/// @link https://css-tricks.com/snippets/sass/tint-shade-functions/ Modified from source (CSS Tricks, Kitty Giraudel)

@function tint($color, $percentage) {
  @return mix($white, $color, $percentage);
}

/// Darken a color with the default black by a percentage
/// @param {Color} $color Color to shade
/// @param {Number} $percentage Percentage to shade
/// @return {Color}
/// @author Kitty Giraudel
/// @link https://css-tricks.com/snippets/sass/tint-shade-functions/ Modified from source (CSS Tricks, Kitty Giraudel)

@function shade($color, $percentage) {
  @return mix($black, $color, $percentage);
}