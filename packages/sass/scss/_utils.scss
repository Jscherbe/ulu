////
/// @group utils
////

/// Remove comments if you'd like
/// @type Boolean 
$file-header-comments: true !default;

@use "sass:map";
@use "sass:meta";
@use "sass:math";
@use "sass:list";

/// Get a required value from a map, throw an error if not found
/// @param {Map} $map The map to get the value from
/// @param {String} $key The key in the map to get value from
/// @param {String} $context The context of using this function for debugging help
/// @return {*} The value from the map

@function require-map-get($map, $key, $context: "unknown") {
  $value: map.get($map, $key);
  @if ($value != null) {
    @return $value;
  } @else {
    @error 'ULU: Unable to find  "#{ $key }" in #{ $context } map.';
  }
}

/// Ensure a value is present in the list, throw an error if not found
/// @param {List} $list The map to get the value from
/// @param {String} $value The value to search for in the list
/// @param {String} $context The context of using this function for debugging help

@mixin require-list-has($list, $value, $context: "unknown") {
  $index: list.index($list, $value) != null;
  @if ($index == null) {
    @error 'ULU: Unable to find item "#{ $value }" in #{ $context } list.';
  }
}

/// Require that the list only is only made up of allowed items
/// @param {List} $allowed The list of allowed items
/// @param {String} $list The list to test allowed against

@mixin require-list-contains($allowed, $list, $context: "unknown") {
  @each $item in $list {
    @include require-list-has($allowed, $item, $context);
  }
}

/// Returns true if we should include something (used for output checking)
/// @param {List} $name Name of item to see if it's included
/// @param {List} $includes List of names

@function included($name, $includes) {
  @if ($includes) {
    @return list.index($includes, $name) != null;
  } @else {
    @return true;
  }
}

/// Returns true if we should include something (used for output checking)
/// @param {List} $context The root area of the framework this file comes from
/// @param {List} $name The name of the specific area/file (optional)

@mixin file-header($context, $name: "") {
  @if ($file-header-comments) {
/* 
=============================================================================
#{ $context }:#{ $name }
============================================================================= 
*/
  }
}

// Provide a default when value typpe is not correct
/// @param {String} $type type of value it should be
/// @param {String} $value the value to provide if it is that type
/// @param {String} $fallback the fallback value

@function if-type($type, $value, $fallback) {
  @if meta.type-of($value) == $type {
    @return $value;
  } @else {
    @return $fallback;
  }
}

// Returns number unit info, and strips the unit
/// @param {String} $number Number to get meta info for
/// @return {Map} With properties (unit, value)

@function number-info($number) {
  $is-number: meta.type-of($number) != 'number';
  $is-unitless: math.is-unitless($number);
  @if ($is-unitless or not $is-number) {
    @return (
      "unit": null,
      "value": $number 
    );
  } @else {
    @return (
      "unit" : math.unit($value), 
      "value": $number / ($number * 0 + 1)
    );
  }
}

/// Repeatable pattern in core

@function map-merge-or-overwrite($original, $changes, $deep: false, $overwrite: false) {
  @if $deep {
    @return map.deep-merge($original, $changes);
  } @else if $overwrite {
    @return $changes;
  } @else {
    @return map.merge($original, $changes);
  }
}
